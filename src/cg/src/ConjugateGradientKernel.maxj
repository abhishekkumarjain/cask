/***
TODO: Add a descriptive comment!
*/

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.*;

import com.custom_computing_ic.dfe_snippets.blas.DenseBlasLib;

class ConjugateGradientKernel extends Kernel {

  private static final int counterWidth = 32;

  protected ConjugateGradientKernel(
      KernelParameters parameters,
      int rsnewLoopLat) {
    super(parameters);

    final DFEType floatT = dfeFloat(11, 53);

    DFEVar n = io.scalarInput("n", dfeUInt(32));
    DFEVar alpha = io.scalarInput("alpha", floatT);

    DFEVar x = io.input("x", floatT);
    DFEVar r = io.input("r", floatT);
    DFEVar p = io.input("p", floatT);
    DFEVar ap = io.input("ap", floatT);

    DFEVar newx = x + alpha * p;
    DFEVar newr = r - alpha * ap;

    DFEVar cycleCounter = control.count.simpleCounter(counterWidth);
    DFEVar rs = floatT.newInstance(this);
    DFEVar rsnew =
      newr * newr +
      (cycleCounter < rsnewLoopLat ? 0.0 : stream.offset(rs, -rsnewLoopLat));
    rs <== rsnew;

    DFEVar outputRsnew = cycleCounter >= n - rsnewLoopLat;

    io.output("xout", newx, floatT);
    io.output("newr", newr, floatT);
    io.output("rsnew", rs, floatT, outputRsnew);
  }
}
