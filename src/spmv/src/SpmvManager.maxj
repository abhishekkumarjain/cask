import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.*;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.*;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;

import com.custom_computing_ic.dfe_snippets.sparse.*;
import com.custom_computing_ic.dfe_snippets.manager.*;

public class SpmvManager extends CustomManager{
    private static final String s_kernelName  = "SpmvKernel";
    private static final String s_reductionKernel = "SpmvReductionKernel";
    private static final String s_paddingKernel = "SpmvPaddingKernel";
    private static final String s_cacheKernel = "SpmvCacheKernel";

    private static final int cacheSize = 1024 * 2;
    private static final int INPUT_WIDTH = 48;
    private static final int MAX_ROWS = 100000;
    private static final int NUM_PIPES = 1;

    // parameters of CSR format used: float64 values, int32 index.
    private static final int mantissaWidth = 53;
    private static final int indexWidth = 32;

    private static final int FLOATING_POINT_LATENCY = 16;

    private static final boolean DBG_CSR_DECODER = false;
    private static final boolean DBG_PAR_CSR_CTL = false;
    private static final boolean DBG_SPMV_KERNEL = false;

    void addComputePipe(int id, int inputWidth) {
        ManagerStateMachine csrDecoder = new CsrDecoder(this, DBG_CSR_DECODER);
        StateMachineBlock csrDecoderBlock = addStateMachine(getCsrDecoder(id), csrDecoder);
        //csrDecoderBlock.getInput("colptr") <== addStreamFromCPU("colptr");
        csrDecoderBlock.getInput("colptr") <== addStreamFromOnCardMemory("colptr" + id,
            MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);

        ManagerStateMachine readControl = new ParallelCsrReadControl(this, inputWidth, DBG_PAR_CSR_CTL);
        StateMachineBlock readControlBlock = addStateMachine(getReadControl(id), readControl);
        readControlBlock.getInput("length") <== csrDecoderBlock.getOutput("rowLength_out");

        KernelBlock cache = addKernel(new SpmvCacheKernel(
              makeKernelParameters(getCacheKernel(id)),
              inputWidth,
              cacheSize,
              indexWidth,
              mantissaWidth
              ));

        KernelBlock k = addKernel(new SpmvKernel(
              makeKernelParameters(getComputeKernel(id)),
              inputWidth,
              cacheSize,
              indexWidth,
              mantissaWidth,
              DBG_SPMV_KERNEL
              ));

        ManagerUtils.addLinearStreamFromLmemToKernel(this, cache, "indptr");
        ManagerUtils.addLinearStreamFromLmemToKernel(this, cache, "values");
        cache.getInput("vromLoad") <== addStreamFromCPU("vromLoad");

        cache.getInput("readenable") <== readControlBlock.getOutput("readenable");
        cache.getInput("readmask") <== readControlBlock.getOutput("readmask");
        cache.getInput("loadEnabled_in") <== readControlBlock.getOutput("vectorLoad");

        k.getInput("loadEnabled") <== cache.getOutput("loadEnabled_out");
        k.getInput("vectorValues") <== cache.getOutput("vectorValues");
        k.getInput("matrixValues") <== cache.getOutput("matrixValues");

        k.getInput("rowLength") <== readControlBlock.getOutput("rowLength");
        k.getInput("rowFinished") <== readControlBlock.getOutput("rowFinished");
        k.getInput("cycleCounter") <== readControlBlock.getOutput("cycleCounter");
        k.getInput("firstReadPosition") <== readControlBlock.getOutput("firstReadPosition");

        KernelBlock r = addKernel(new SpmvReductionKernel(
              makeKernelParameters(getReductionKernel(id)),
              FLOATING_POINT_LATENCY,
              MAX_ROWS));
        r.getInput("reductionIn") <== k.getOutput("output");

        KernelBlock p = addKernel(new PaddingKernel(
              makeKernelParameters(getPaddingKernel(id))));

        p.getInput("paddingIn") <== r.getOutput("reductionOut");
        ManagerUtils.addLinearStreamFromKernelToLmem(this, p, "paddingOut");
    }

    SpmvManager(EngineParameters ep) {
        super(ep);
        addMaxFileConstant("inputWidth", INPUT_WIDTH);
        addMaxFileConstant("cacheSize", cacheSize);
        addMaxFileConstant("maxRows", MAX_ROWS);

        ManagerUtils.setDRAMMaxDeviceFrequency(this, ep);

        addComputePipe(0, INPUT_WIDTH);
    }

    String getComputeKernel(int id) {
      return "computeKernel" + id;
    }

    String getCacheKernel(int id) {
      return "cacheKernel" + id;
    }

    String getReductionKernel(int id) {
      return "reductionKernel" + id;
    }

    String getPaddingKernel(int id) {
      return "paddingKernel" + id;
    }

    String getCsrDecoder(int id) {
      return "csrDecoder" + id;
    }

    String getReadControl(int id) {
      return "readControl" + id;
    }

    void setUpComputePipe(
        EngineInterface ei, int id,
        InterfaceParam vectorSize,
        InterfaceParam vectorLoadCycles,
        InterfaceParam nPartitions,
        InterfaceParam n,
        InterfaceParam outResultStartAddress,
        InterfaceParam colPtrStartAddress,
        InterfaceParam colptrSize,
        InterfaceParam totalCycles,
        InterfaceParam paddingCycles) {

      String computeKernel = getComputeKernel(id);
      String cacheKernel = getCacheKernel(id);
      String reductionKernel = getReductionKernel(id);
      String paddingKernel = getPaddingKernel(id);
      String csrDecoder = getCsrDecoder(id);
      String readControl = getReadControl(id);

      ei.setTicks(computeKernel, totalCycles);

      ei.setTicks(cacheKernel, totalCycles);
      ei.setScalar(cacheKernel, "vectorLoadCycles", vectorLoadCycles);

      ei.setTicks(reductionKernel, (n * nPartitions));
      ei.setScalar(reductionKernel, "nRows", n);
      ei.setScalar(reductionKernel, "totalCycles", n * nPartitions);

      ei.setTicks(paddingKernel, (n + paddingCycles));
      ei.setScalar(paddingKernel, "nInputs", n);

      ei.setScalar(csrDecoder, "nrows", n);

      ei.setLMemLinear("colptr" + id,
          colPtrStartAddress,
          colptrSize );

      ei.setScalar(readControl, "nrows", n);
      ei.setScalar(readControl, "vectorLoadCycles", vectorLoadCycles);
      ei.setScalar(readControl, "nPartitions", nPartitions);

      ei.setStream("vromLoad", CPUTypes.DOUBLE, vectorSize * CPUTypes.DOUBLE.sizeInBytes());
      ei.setLMemLinear(
          "paddingOut",
          outResultStartAddress,
          (n + paddingCycles) * CPUTypes.DOUBLE.sizeInBytes());

    }

    private EngineInterface interfaceDefault() {
      EngineInterface ei = new EngineInterface();

      InterfaceParam vectorSize = ei.addParam("vectorSize", CPUTypes.INT);
      InterfaceParam vectorLoadCycles = ei.addParam("vectorLoadCycles", CPUTypes.INT);
      InterfaceParam nPartitions = ei.addParam("nPartitions", CPUTypes.INT);
      InterfaceParamArray nrows = ei.addParamArray("nrows", CPUTypes.INT32);
      InterfaceParamArray outStartAddresses = ei.addParamArray("outStartAddresses", CPUTypes.INT64);
      InterfaceParamArray totalCycles = ei.addParamArray("totalCycles", CPUTypes.INT32);
      InterfaceParamArray paddingCycles = ei.addParamArray("paddingCycles", CPUTypes.INT32);

      InterfaceParamArray colptrStartAddresses = ei.addParamArray("colPtrStartAddresses", CPUTypes.INT64);
      InterfaceParamArray colptrSizes = ei.addParamArray("colptrSizes", CPUTypes.INT32);

      for (int i = 0; i < NUM_PIPES; i++)
        setUpComputePipe(ei, i,
            vectorSize,
            vectorLoadCycles,
            nPartitions,
            nrows.get(i),
            outStartAddresses.get(i),
            colptrStartAddresses.get(i),
            colptrSizes.get(i),
            totalCycles.get(i),
            paddingCycles.get(i));

      ei.ignoreLMem("cpu2lmem");
      ei.ignoreStream("fromcpu");
      ei.ignoreStream("tocpu");
      ei.ignoreLMem("lmem2cpu");
      return ei;
    }

    public static void main(String[] args) {
        SpmvManager manager = new SpmvManager(new EngineParameters(args));
        ManagerUtils.debug(manager);
        manager.createSLiCinterface(ManagerUtils.dramWrite(manager));
        manager.createSLiCinterface(ManagerUtils.dramRead(manager));
        manager.createSLiCinterface(manager.interfaceDefault());
        //ManagerUtils.setFullBuild(manager, 2, 2);
        manager.build();
    }
}
