import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;

import com.custom_computing_ic.dfe_snippets.sparse.*;
import com.custom_computing_ic.dfe_snippets.manager.*;

public class SpmvManager extends CustomManager{
    private static final String s_kernelName  = "SpmvKernel";
    private static final String s_reductionKernel = "SpmvReductionKernel";
    private static final String s_paddingKernel = "SpmvPaddingKernel";
    private static final String s_cacheKernel = "SpmvCacheKernel";

    private static final int cacheSize = 1024 * 2;
    private static final int inputWidth = 48;
    private static final int MAX_ROWS = 30000;

    // parameters of CSR format used: float64 values, int32 index.
    private static final int mantissaWidth = 53;
    private static final int indexWidth = 32;

    private static final int FLOATING_POINT_LATENCY = 16;

    private static final boolean DBG_CSR_DECODER = false;
    private static final boolean DBG_PAR_CSR_CTL = false;
    private static final boolean DBG_SPMV_KERNEL = false;

    SpmvManager(EngineParameters ep) {
        super(ep);
        addMaxFileConstant("inputWidth", inputWidth);
        addMaxFileConstant("cacheSize", cacheSize);
        addMaxFileConstant("maxRows", MAX_ROWS);

        ManagerUtils.setDRAMMaxDeviceFrequency(this, ep);

        ManagerStateMachine csrDecoder = new CsrDecoder(this, DBG_CSR_DECODER);
        StateMachineBlock csrDecoderBlock = addStateMachine("csrDecoder", csrDecoder);
        csrDecoderBlock.getInput("colptr") <== addStreamFromCPU("colptr");

        ManagerStateMachine readControl = new ParallelCsrReadControl(this, inputWidth, DBG_PAR_CSR_CTL);
        StateMachineBlock readControlBlock = addStateMachine("readControl", readControl);
        readControlBlock.getInput("length") <== csrDecoderBlock.getOutput("rowLength_out");

        KernelBlock cache = addKernel(new SpmvCacheKernel(
              makeKernelParameters(s_cacheKernel),
              inputWidth,
              cacheSize,
              indexWidth,
              mantissaWidth
              ));

        KernelBlock k = addKernel(new SpmvKernel(
              makeKernelParameters(s_kernelName),
              inputWidth,
              cacheSize,
              indexWidth,
              mantissaWidth,
              DBG_SPMV_KERNEL
              ));

        addStreamToOnCardMemory("cpu2lmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("fromcpu");



        ManagerUtils.addLinearStreamFromLmemToKernel(this, cache, "indptr");
        ManagerUtils.addLinearStreamFromLmemToKernel(this, cache, "values");

        cache.getInput("vromLoad") <== addStreamFromCPU("vromLoad");

        cache.getInput("readenable") <== readControlBlock.getOutput("readenable");
        cache.getInput("readmask") <== readControlBlock.getOutput("readmask");
        cache.getInput("loadEnabled_in") <== readControlBlock.getOutput("vectorLoad");

        k.getInput("loadEnabled") <== cache.getOutput("loadEnabled_out");
        k.getInput("vectorValues") <== cache.getOutput("vectorValues");
        k.getInput("matrixValues") <== cache.getOutput("matrixValues");

        k.getInput("rowLength") <== readControlBlock.getOutput("rowLength");
        k.getInput("rowFinished") <== readControlBlock.getOutput("rowFinished");
        k.getInput("cycleCounter") <== readControlBlock.getOutput("cycleCounter");
        k.getInput("firstReadPosition") <== readControlBlock.getOutput("firstReadPosition");

        KernelBlock r = addKernel(new SpmvReductionKernel(
              makeKernelParameters(s_reductionKernel),
              FLOATING_POINT_LATENCY,
              MAX_ROWS));
        r.getInput("reductionIn") <== k.getOutput("output");

        KernelBlock p = addKernel(new PaddingKernel(
              makeKernelParameters(s_paddingKernel)));

        p.getInput("paddingIn") <== r.getOutput("reductionOut");
        addStreamToCPU("output") <== p.getOutput("paddingOut");
    }

    private static EngineInterface interfaceDefault() {
      EngineInterface ei = new EngineInterface();

      InterfaceParam n = ei.addParam("nrows", CPUTypes.INT);
      InterfaceParam vectorSize = ei.addParam("vectorSize", CPUTypes.INT);
      InterfaceParam vectorLoadCycles = ei.addParam("vectorLoadCycles", CPUTypes.INT);
      InterfaceParam totalCycles = ei.addParam("totalCycles", CPUTypes.INT);
      InterfaceParam paddingCycles = ei.addParam("paddingCycles", CPUTypes.INT);
      InterfaceParam nPartitions = ei.addParam("nPartitions", CPUTypes.INT);

      ei.setTicks(s_kernelName, totalCycles);

      ei.setTicks(s_cacheKernel, totalCycles);
      ei.setScalar(s_cacheKernel, "vectorLoadCycles", vectorLoadCycles);

      ei.setTicks(s_reductionKernel, (n * nPartitions));
      ei.setScalar(s_reductionKernel, "nRows", n);
      ei.setScalar(s_reductionKernel, "totalCycles", n * nPartitions);

      ei.setTicks(s_paddingKernel, (n + paddingCycles));
      ei.setScalar(s_paddingKernel, "nInputs", n);

      ei.setScalar("csrDecoder", "nrows", n);

      ei.setScalar("readControl", "nrows", n);
      ei.setScalar("readControl", "vectorLoadCycles", vectorLoadCycles);
      ei.setScalar("readControl", "nPartitions", nPartitions);

      ei.setStream("output", CPUTypes.DOUBLE, (n + paddingCycles) * CPUTypes.DOUBLE.sizeInBytes());
      ei.setStream("vromLoad", CPUTypes.DOUBLE, vectorSize * CPUTypes.DOUBLE.sizeInBytes());

      ei.ignoreLMem("cpu2lmem");
      ei.ignoreStream("fromcpu");
      return ei;
    }

    public static void main(String[] args) {
        SpmvManager manager = new SpmvManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        // ManagerUtils.debug(manager);
        ManagerUtils.setFullBuild(manager, 2, 2);
        manager.createSLiCinterface(ManagerUtils.interfaceWrite(
              "write", "fromcpu", "cpu2lmem"));
        manager.build();
    }
}
