/***
	TODO Add a descriptive comment!
*/
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;

import com.custom_computing_ic.dfe_snippets.sparse.*;
import com.custom_computing_ic.dfe_snippets.manager.*;

public class SpmvManager extends CustomManager{
    private static final String s_kernelName  = "SpmvKernel";
    private static final int inputWidth = 4;

    private static final boolean DBG_CSR_DECODER = false;
    private static final boolean DBG_PAR_CSR_CTL = false;
    private static final boolean DBG_SPMV_KERNEL = true;

    SpmvManager(EngineParameters ep) {
        super(ep);
        addMaxFileConstant("inputWidth", inputWidth);

        ManagerStateMachine csrDecoder = new CsrDecoder(this, DBG_CSR_DECODER);
        StateMachineBlock csrDecoderBlock = addStateMachine("csrDecoder", csrDecoder);
        csrDecoderBlock.getInput("colptr") <== addStreamFromCPU("colptr");

        ManagerStateMachine readControl = new ParallelCsrReadControl(this, inputWidth, DBG_PAR_CSR_CTL);
        StateMachineBlock readControlBlock = addStateMachine("readControl", readControl);
        readControlBlock.getInput("length") <== csrDecoderBlock.getOutput("rowLength_out");

        KernelBlock k = addKernel(new SpmvKernel(
              makeKernelParameters(s_kernelName),
              inputWidth,
              DBG_SPMV_KERNEL
              ));

        addStreamToOnCardMemory("cpu2lmem", MemoryControlGroup.MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("fromcpu");

        ManagerUtils.addLinearStreamFromLmemToKernel(this, k, "indptr");
        ManagerUtils.addLinearStreamFromLmemToKernel(this, k, "values");

        k.getInput("vromLoad") <== addStreamFromCPU("vromLoad");

        k.getInput("readenable") <== readControlBlock.getOutput("readenable");
        k.getInput("readmask") <== readControlBlock.getOutput("readmask");
        k.getInput("rowLength") <== readControlBlock.getOutput("rowLength");
        k.getInput("rowFinished") <== readControlBlock.getOutput("rowFinished");
        k.getInput("cycleCounter") <== readControlBlock.getOutput("cycleCounter");
        k.getInput("firstReadPosition") <== readControlBlock.getOutput("firstReadPosition");
        addStreamToCPU("output") <== k.getOutput("output");
    }

    private static EngineInterface interfaceDefault() {
      EngineInterface ei = new EngineInterface();
      ei.ignoreLMem("cpu2lmem");
      ei.ignoreStream("fromcpu");
      return ei;
    }

    public static void main(String[] args) {
        SpmvManager manager = new SpmvManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        ManagerUtils.debug(manager);
        manager.createSLiCinterface(ManagerUtils.interfaceWrite(
              "write", "fromcpu", "cpu2lmem"));
        manager.build();
    }
}
