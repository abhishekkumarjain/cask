import java.util.*;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

import com.custom_computing_ic.dfe_snippets.utils.Reductions;
import com.custom_computing_ic.dfe_snippets.reductions.LogAddReduce;

class SpmvKernel extends Kernel {

  // N x N matrix, nnzs nonzeros
  //
  // load data for N cycles into cache
  // compute for N cycles
  // -- in the mean time load data for N cycles in double buffer
  // repeat
  //
  // Sources of inefficiency:
  // -- empty rows
  // -- port sharing cannot be used

  private final  DFEVectorType<DFEVar> vtype, ivtype;
  private final List<Memory<DFEVar>> vroms;
  private final int inputWidth;
  private final DFEType addressT;
  private final boolean dbg;

  private static final int fpL = 16;

  protected SpmvKernel(
      KernelParameters parameters,
      int inputWidth,
      int cacheSize,
      boolean dbg) {
    super(parameters);

    optimization.pushPipeliningFactor(0);
    optimization.pushDSPFactor(1);


    this.inputWidth = inputWidth;
    this.addressT = dfeUInt(MathUtils.bitsToAddress(cacheSize));
    this.dbg = dbg;

    // load entire vector or until cache is full
    int sizeBits = 32; // XXX may need to run for more cycles
    DFEVar currentCycle = control.count.simpleCounter(sizeBits);
    DFEVar vRomLoadEnable = io.input("loadEnabled", dfeBool());

    DFEVar vectorLoadCycles = io.scalarInput("vectorLoadCycles", dfeUInt(32));
    Params loadAddressParams = control.count.makeParams(sizeBits )
      .withMax(vectorLoadCycles)
      .withEnable(vRomLoadEnable);
    DFEVar loadAddress = control.count.makeCounter(loadAddressParams).getCount();

    vtype = new DFEVectorType<DFEVar> (dfeFloat(11, 53), inputWidth);
    ivtype = new DFEVectorType<DFEVar> (dfeUInt(32), inputWidth);
    DFEVar vectorValue = io.input("vromLoad", dfeFloat(11, 53), vRomLoadEnable);
     //--- Cache allocation and control
    vroms = new ArrayList<Memory<DFEVar>>();
    for (int i = 0; i < inputWidth; i++) {
      Memory<DFEVar> vrom = mem.alloc(dfeFloat(11, 53), cacheSize);
      vroms.add(vrom);
      vrom.write(
          loadAddress.cast(addressT),
          vectorValue,
          vRomLoadEnable);
    }

    // --- I/O
    DFEVar readEnable = io.input("readenable", dfeBool()) & ~vRomLoadEnable;
    DFEVar readMask = io.input("readmask", dfeUInt(inputWidth));
    DFEVector<DFEVar> values = selectValues(
        io.input("values", vtype, readEnable),
        readMask);
    DFEVector<DFEVar> colptr = selectValues(
        io.input("indptr", ivtype, readEnable),
         readMask);
    DFEVector<DFEVar> vectorValues = resolveVectorReads(colptr);
    DFEVar result = Reductions.reduce(values * vectorValues);

    // --- Accumulation
    DFEVar rowFinished = io.input("rowFinished", dfeBool());
    DFEVar rowLength = io.input("rowLength", dfeUInt(32));
    DFEVar cycleCounter = io.input("cycleCounter", dfeUInt(32));
    DFEVar firstReadPosition = io.input("firstReadPosition", dfeUInt(32));

    DFEVar runLength = firstReadPosition + rowLength;
    DFEVar modulo = KernelMath.modulo(runLength, inputWidth);
    DFEVar quot = (runLength - modulo.cast(dfeUInt(32))) / inputWidth;

    DFEVar totalCycles = quot + (modulo === 0 ? constant.var(dfeUInt(32), 0) : 1);

    DFEVar carriedSum = dfeFloat(11, 53).newInstance(this);
    DFEVar newSum = result + (cycleCounter < fpL ? 0 : carriedSum);
    carriedSum <== stream.offset(newSum, -fpL);

    DFEVar firstValidPartialSum = (totalCycles > fpL)? (totalCycles - fpL) : 0;
    DFEVar validPartialSums = (cycleCounter >= firstValidPartialSum);
    LogAddReduce r = new LogAddReduce(this,
        validPartialSums,
        rowFinished,
        newSum,
        dfeFloat(11, 53),
        fpL);

    // TODO still need reduction step
    DFEVar outputEnable = ~vRomLoadEnable & rowFinished;
    io.output("output", r.getOutput(), dfeFloat(11, 53), outputEnable);

    // --- Debug
    if (dbg) {
        Params rowCounterParams = control.count.makeParams(32)
          .withEnable(rowFinished);
        DFEVar rowCounter = control.count.makeCounter(rowCounterParams).getCount();
      debug.simPrintf(
          rowLength !== 0,
          "Kernel -- row %d totalCycles %d, readenable %d, readmask %d rowFinished %d rowLength %d output: %f cycleCounter %d validPartialSums %d newSum %f firstRead %d",
          rowCounter, totalCycles, readEnable, readMask, rowFinished, rowLength, r.getOutput(), cycleCounter, validPartialSums, newSum, firstReadPosition);
      debug.simPrintf(rowLength !== 0 , " loadEnable %d loadAddress %d\n", vRomLoadEnable, loadAddress);
      //debug.simPrintf("\n");
      //debug.simPrintf("Values: ");
      //for (int i = 0; i < inputWidth; i++)
        //debug.simPrintf("%f ", values[i]);
      //debug.simPrintf("Indices: ");
      //for (int i = 0; i < inputWidth; i++)
        //debug.simPrintf("%d ", colptr[i]);
      //debug.simPrintf("\n");
    }
  }

  DFEVector<DFEVar> selectValues(
      DFEVector<DFEVar> in,
      DFEVar readMask) {
    DFEVector<DFEVar> out = in.getType().newInstance(this);
    for (int i = 0; i < in.getSize(); i++)
      out[i] <== readMask.slice(i) === 0 ?  0 : in[i];
    return out;
  }


  DFEVector<DFEVar> resolveVectorReads(DFEVector<DFEVar> reads) {
    DFEVector<DFEVar> out = vtype.newInstance(this);
    for (int i = 0; i < vroms.size(); i++)
      out[i] <== vroms.get(i).read(reads[i].cast(addressT));
    return out;
  }

}


// XXX for now we assume the matrix is smaller then max rows
// will have to implement an lmem design above this threshold
// using lmem wrapped above this thresholed may be feasilbe,
// see the DramAccumulator snippet in dfe-snippets
class SpmvReductionKernel extends Kernel {

  protected SpmvReductionKernel(KernelParameters parameters, int fpl, int maxRows) {
    super(parameters);

    DFEVar in = io.input("reductionIn", dfeFloat(11, 53));
    DFEVar n = io.scalarInput("nRows", dfeUInt(32));
    DFEVar totalCycles = io.scalarInput("totalCycles", dfeUInt(32));

    DFEVar cycles = control.count.simpleCounter(32);

    DFEVar sumCarried = dfeFloat(11, 53).newInstance(this);
    DFEVar sum = in + (cycles < n ? 0 : sumCarried);
    sumCarried <== stream.offset(sum, -(n.cast(dfeInt(32))), -maxRows, -(fpl + 2));

    // output on the last n cycles
    DFEVar outputEnable = totalCycles - cycles <= n;
    io.output("reductionOut", sum, dfeFloat(11, 53), outputEnable);
  }
}


class PaddingKernel extends Kernel {
  protected PaddingKernel(KernelParameters parameters) {
    super(parameters);
    DFEVar nInputs = io.scalarInput("nInputs", dfeUInt(32));
    DFEVar cycles = control.count.simpleCounter(32);
    DFEVar paddingCycles = cycles >= nInputs;
    DFEVar input = io.input("paddingIn", dfeFloat(11, 53), ~paddingCycles);
    DFEVar out = paddingCycles ? 0 : input;
    io.output("paddingOut", out, dfeFloat(11, 53));
  }
}
