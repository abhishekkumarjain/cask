import java.util.*;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.*;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.*;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

import com.custom_computing_ic.dfe_snippets.utils.Reductions;
import com.custom_computing_ic.dfe_snippets.reductions.LogAddReduce;

class SpmvKernel extends Kernel {

  // N x N matrix, nnzs nonzeros
  //
  // load data for N cycles into cache
  // compute for N cycles
  // -- in the mean time load data for N cycles in double buffer
  // repeat
  //
  // Sources of inefficiency:
  // -- empty rows
  // -- port sharing cannot be used

  private final int cacheSize = 1024;
  private final  DFEVectorType<DFEVar> vtype, ivtype;
  private final List<Memory<DFEVar>> vroms;
  private final int inputWidth;
  private final DFEType addressT;
  private final boolean dbg;

  private static final int fpL = 16;

  protected SpmvKernel(KernelParameters parameters, int inputWidth, boolean dbg) {
    super(parameters);

    this.inputWidth = inputWidth;
    this.addressT = dfeUInt(MathUtils.bitsToAddress(cacheSize));
    this.dbg = dbg;

    DFEVar n = io.scalarInput("n", dfeUInt(32));
    // load entire vector or until cache is full
    int sizeBits = 32; // XXX may need to run for more cycles
    DFEVar currentCycle = control.count.simpleCounter(sizeBits);
    DFEVar vRomLoadEnable = (currentCycle < n) & (currentCycle < cacheSize);

    vtype = new DFEVectorType<DFEVar> (dfeFloat(11, 53), inputWidth);
    ivtype = new DFEVectorType<DFEVar> (dfeUInt(32), inputWidth);

    DFEVar vectorValue = io.input("vromLoad", dfeFloat(11, 53), vRomLoadEnable);

     //--- Cache allocation and control
    vroms = new ArrayList<Memory<DFEVar>>();
    for (int i = 0; i < inputWidth; i++) {
      Memory<DFEVar> vrom = mem.alloc(dfeFloat(11, 53), cacheSize);
      vroms.add(vrom);
//        XXX will have to reset the address at some point
      vrom.write(
          currentCycle.cast(addressT),
          vectorValue,
          vRomLoadEnable);
    }

    // --- I/O
    DFEVar readEnable = io.input("readenable", dfeBool(), ~vRomLoadEnable) & ~vRomLoadEnable;
    DFEVar readMask = io.input("readmask", dfeUInt(inputWidth), ~vRomLoadEnable);

    DFEVector<DFEVar> values = selectValues(
        io.input("values", vtype, readEnable),
        readMask);
    DFEVector<DFEVar> colptr = selectValues(
        io.input("indptr", ivtype, readEnable),
         readMask);

    DFEVector<DFEVar> vectorValues = resolveVectorReads(colptr);
    DFEVar result = Reductions.reduce(values * vectorValues);

    // --- Accumulation
    DFEVar rowFinished = io.input("rowFinished", dfeBool(), ~vRomLoadEnable);
    DFEVar rowLength = io.input("rowLength", dfeUInt(32), ~vRomLoadEnable);
    DFEVar cycleCounter = io.input("cycleCounter", dfeUInt(32), ~vRomLoadEnable);
    DFEVar firstReadPosition = io.input("firstReadPosition", dfeUInt(32), ~vRomLoadEnable);

    DFEVar totalCycles = (firstReadPosition + rowLength) / inputWidth;  // / inputWidth (transform to multily;
    DFEVar carriedSum = dfeFloat(11, 53).newInstance(this);
    DFEVar newSum = result + (cycleCounter < fpL ? 0 : carriedSum);
    carriedSum <== stream.offset(newSum, -fpL);

    DFEVar firstValidPartialSum = (totalCycles + 1 > fpL)? (totalCycles + 1 - fpL) : 0;
    DFEVar validPartialSums = (totalCycles >= firstValidPartialSum);
    LogAddReduce r = new LogAddReduce(this,
        validPartialSums,
        rowFinished,
        newSum,
        dfeFloat(11, 53),
        fpL);

    // TODO still need reduction step
    DFEVar outputEnable = ~vRomLoadEnable & rowFinished; // and row has finished
    DFEVar output = rowLength === 0 ? 0 : r.getOutput();
    io.output("output", output, dfeFloat(11, 53), outputEnable);

    // --- Debug
    if (dbg) {
      debug.simPrintf(
          "Kernel -- readenable %d, readmask %d rowFinished %d rowLength %d output: %f cycleCounter %d validPartialSums %d newSum %f ",
          readEnable, readMask, rowFinished, rowLength, output, cycleCounter, validPartialSums, newSum);

      debug.simPrintf("Values: ");
      for (int i = 0; i < inputWidth; i++)
        debug.simPrintf("%f ", values[i]);

      debug.simPrintf("Indices: ");
      for (int i = 0; i < inputWidth; i++)
        debug.simPrintf("%d ", colptr[i]);
      debug.simPrintf("\n");
    }
  }

  DFEVector<DFEVar> selectValues(
      DFEVector<DFEVar> in,
      DFEVar readMask) {
    DFEVector<DFEVar> out = in.getType().newInstance(this);
    for (int i = 0; i < in.getSize(); i++)
      out[i] <== readMask.slice(i) === 0 ?  0 : in[i];
    return out;
  }


  DFEVector<DFEVar> resolveVectorReads(DFEVector<DFEVar> reads) {
    DFEVector<DFEVar> out = vtype.newInstance(this);
    for (int i = 0; i < vroms.size(); i++)
      out[i] <== vroms.get(i).read(reads[i].cast(addressT));
    return out;
  }

}
