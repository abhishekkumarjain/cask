/***
	TODO Add a descriptive comment!
*/
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class fpgaNaiveManager extends CustomManager{

    private static final String s_kernelName  = "fpgaNaiveKernel";

    fpgaNaiveManager(EngineParameters ep)
    {
        super(ep);

        KernelBlock k = addKernel(new fpgaNaiveKernel(makeKernelParameters(s_kernelName)));

        k.getInput("value") <== addStreamFromCPU("value");
        k.getInput("indptr") <== addStreamFromCPU("indptr");
        addStreamToCPU("output") <== k.getOutput("output");
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface engine_interface = new EngineInterface();
        CPUTypes type = CPUTypes.INT32;
        int size = type.sizeInBytes();

        CPUTypes resultType = CPUTypes.DOUBLE;

        InterfaceParam N = engine_interface.addParam("N", CPUTypes.INT);
        InterfaceParam sizeBytes = N * size;
        InterfaceParam floatBytes = N * resultType.sizeInBytes();

        engine_interface.setTicks(s_kernelName, N);

        engine_interface.setStream("value", resultType, floatBytes);
        engine_interface.setStream("indptr", type, sizeBytes);
        engine_interface.setStream("output", resultType, floatBytes);

        return engine_interface;
    }


    public static void main(String[] args) {
        fpgaNaiveManager manager = new fpgaNaiveManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        manager.build();
    }
}
