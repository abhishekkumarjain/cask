import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.*;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;

import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;


public class fpgaNaiveManager extends CustomManager {

    private static final String s_kernelName  = "fpgaNaiveKernel";

    private static final int fpL = 16;
    private static final int cacheSize = 32 * 1024;
    private static final MemoryControlGroup.MemoryAccessPattern LINEAR = MemoryControlGroup.MemoryAccessPattern.LINEAR_1D;


    fpgaNaiveManager(EngineParameters ep, boolean debugKernel, boolean debugSm) {
        super(ep);

        // -- CSR Control State Machine
        ManagerStateMachine stateMachine = new CSRControlSM(this, debugSm);
        StateMachineBlock control = addStateMachine("CSRControlSM", stateMachine);
        control.getInput("indptr") <== addStreamFromOnCardMemory("indptr", LINEAR);
        control.getInput("rowptr") <== addStreamFromOnCardMemory("rowptr", LINEAR);
        
        // -- CSR Compute Pipe
        KernelBlock compute = addKernel(new fpgaNaiveKernel(makeKernelParameters(s_kernelName),
                                                            fpL, cacheSize, debugKernel));
        compute.getInput("value_in") <== addStreamFromOnCardMemory("value", LINEAR);
        compute.getInput("indptr_in") <== control.getOutput("indptr_out");
        compute.getInput("rowEnd_in") <== control.getOutput("rowEnd_out");
        addStreamToCPU("b") <== compute.getOutput("b");

        addStreamToOnCardMemory("cpu2lmem", LINEAR) <== addStreamFromCPU("fromcpu");

        addMaxFileConstant("fpL", fpL);
    }

    private static EngineInterface interfaceWrite (String name) {
        EngineInterface ei = new EngineInterface(name);
        CPUTypes TYPE = CPUTypes.INT;
        InterfaceParam size = ei.addParam("size_bytes", TYPE);
        InterfaceParam start = ei.addParam("start_bytes", TYPE);
        ei.setStream("fromcpu", CPUTypes.UINT8, size);
        ei.setLMemLinear("cpu2lmem", start, size);
        ei.ignoreAll(Direction.IN_OUT);
        return ei ;
    }

    /** Interface for the entire SpMV */
    private static EngineInterface interfaceDefault() {
        EngineInterface ei = new EngineInterface();

        CPUTypes resultType = CPUTypes.DOUBLE;

        InterfaceParam nnzs = ei.addParam("nnzs", CPUTypes.INT); // number of nonzeros
        InterfaceParam emptyRows = ei.addParam("emptyRows", CPUTypes.INT);
        InterfaceParam n = ei.addParam("n", CPUTypes.INT); // matrix rank

        ei.setTicks(s_kernelName, nnzs + emptyRows);

        InterfaceParam valueSize = ei.addParam("value_size_bytes", CPUTypes.INT);
        InterfaceParam indptrSize = ei.addParam("indptr_size_bytes", CPUTypes.INT);
        InterfaceParam rowPtrSize = ei.addParam("rowptr_size_bytes", CPUTypes.INT);

        ei.setLMemLinear("value", ei.addConstant(0l), valueSize);
        ei.setLMemLinear("indptr", valueSize, indptrSize);
        ei.setLMemLinear("rowptr", valueSize + indptrSize, rowPtrSize);

        ei.setStream("b", resultType, n * resultType.sizeInBytes());
        ei.ignoreLMem("cpu2lmem");
        ei.ignoreStream("fromcpu");
        return ei;
    }

    public static void main(String[] args) {
        boolean debugKernel = false;
        boolean debugSm = false;

        fpgaNaiveManager manager = new fpgaNaiveManager(new EngineParameters(args), debugKernel, debugSm);
        manager.createSLiCinterface(interfaceDefault());
        manager.createSLiCinterface(interfaceWrite("writeDRAM"));

        manager.build();
    }

}
