import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

import com.maxeler.maxcompiler.v2.managers.custom.blocks.StateMachineBlock;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;

public class fpgaNaiveManager extends CustomManager{

    private static final String s_kernelName  = "fpgaNaiveKernel";

    private static final int fpL = 16;

    fpgaNaiveManager(EngineParameters ep, boolean dbg) {
        super(ep);

        // -- CSR Control State Machine
        ManagerStateMachine stateMachine = new CSRControlSM(this, dbg);
        StateMachineBlock control = addStateMachine("CSRControlSM", stateMachine);
        control.getInput("indptr") <== addStreamFromCPU("indptr");
        control.getInput("rowptr") <== addStreamFromCPU("rowptr");
        
        // -- CSR Compute Pipe
        KernelBlock compute = addKernel(new fpgaNaiveKernel(makeKernelParameters(s_kernelName),
                                                                fpL, dbg));
        compute.getInput("value_in") <== addStreamFromCPU("value");
        compute.getInput("indptr_in") <== control.getOutput("indptr_out");
        compute.getInput("rowEnd_in") <== control.getOutput("rowEnd_out");
        addStreamToCPU("b") <== compute.getOutput("b");

        addMaxFileConstant("fpL", fpL);
    }

    /** Interface for the entire SpMV */
    private static EngineInterface interfaceDefault() {
        EngineInterface ei = new EngineInterface();

        CPUTypes valueType = CPUTypes.DOUBLE;
        CPUTypes indexType = CPUTypes.INT32;
        CPUTypes resultType = CPUTypes.DOUBLE;

        InterfaceParam nnzs = ei.addParam("nnzs", CPUTypes.INT); // number of nonzeros

        ei.setTicks(s_kernelName, nnzs + fpL);
        ei.setScalar(s_kernelName, "n", nnzs);

        InterfaceParam valueSize = ei.addParam("value_size", CPUTypes.INT);
        InterfaceParam indptrSize = ei.addParam("indptr_size", CPUTypes.INT);
        InterfaceParam rowPtrSize = ei.addParam("rowptr_size", CPUTypes.INT);

        ei.setStream("value", valueType, valueSize * valueType.sizeInBytes());
        ei.setStream("indptr", indexType, indptrSize * indexType.sizeInBytes());
        ei.setStream("rowptr", indexType, rowPtrSize * indexType.sizeInBytes());

        ei.setStream("b", resultType, fpL * resultType.sizeInBytes());
        return ei;
    }

    public static void main(String[] args) {
        boolean debug = false;

        fpgaNaiveManager manager = new fpgaNaiveManager(new EngineParameters(args), debug);
        manager.createSLiCinterface(interfaceDefault());

        manager.build();
    }

}
